DUL_colorcode_message:
  type: procedure
  debug: false
  DUL:
    name:
    - Colorcode Message
    author:
    - BlackCoyote
    description:
    - Encodes your message into a colour code string and back.
    -  only works with characters from a-z, 0-9, and _ !
    usage:
    - <proc[DUL_colorcode_message].context[encode/decode|<message>]>
    example:
    - <proc[DUL_colorcode_message].context[encode|my_sword_id]>
  encode:
    a: '&0&0'
    b: '&0&1'
    c: '&0&2'
    d: '&0&3'
    e: '&0&4'
    f: '&0&5'
    g: '&0&6'
    h: '&0&7'
    i: '&0&8'
    j: '&0&9'
    k: '&1&0'
    l: '&1&1'
    m: '&1&2'
    n: '&1&3'
    o: '&1&4'
    p: '&1&5'
    q: '&1&6'
    r: '&1&7'
    s: '&1&8'
    t: '&1&9'
    u: '&2&0'
    v: '&2&1'
    w: '&2&2'
    x: '&2&3'
    y: '&2&4'
    z: '&2&5'
    0: '&2&6'
    1: '&2&7'
    2: '&2&8'
    3: '&2&9'
    4: '&3&0'
    5: '&3&1'
    6: '&3&2'
    7: '&3&3'
    8: '&3&4'
    9: '&3&5'
    _: '&3&6'
  decode:
    '&0&0': a
    '&0&1': b
    '&0&2': c
    '&0&3': d
    '&0&4': e
    '&0&5': f
    '&0&6': g
    '&0&7': h
    '&0&8': i
    '&0&9': j
    '&1&0': k
    '&1&1': l
    '&1&2': m
    '&1&3': n
    '&1&4': o
    '&1&5': p
    '&1&6': q
    '&1&7': r
    '&1&8': s
    '&1&9': t
    '&2&0': u
    '&2&1': v
    '&2&2': w
    '&2&3': x
    '&2&4': y
    '&2&5': z
    '&2&6': 0
    '&2&7': 1
    '&2&8': 2
    '&2&9': 3
    '&3&0': 4
    '&3&1': 5
    '&3&2': 6
    '&3&3': 7
    '&3&4': 8
    '&3&5': 9
    '&3&6': _
  script:
  - if li@encode|decode !contains <def[1]||> {
    - debug error "DUL - No valid action specified! Must be encode or decode!"
    - determine null
    }
  - if <def[2]||> == "" {
    - debug error "DUL - No message specified to <def[1]>!"
    - determine null
    }
  - define result ""
  - if <def[1]> == encode {
    - define list <def[2].to_list>
    } else {
    - define list li@
    - define 2 <def[2].escaped.replace[&ss].with[&]>
    - repeat <def[2].length.div[4].as_int> {
      - define list <def[list].include[<def[2].substring[<def[value].mul[4].sub[4].add[1]||1>,<def[value].mul[4]>]>]>
      }
    }
  - foreach <def[list]>:
    - define result "<def[result]><script.yaml_key[<def[1]>.<def[value]>]||->"
  - determine <def[result].parse_color>
